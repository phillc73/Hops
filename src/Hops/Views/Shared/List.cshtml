@using Hops.Models;
@model ListModel

@{
    ViewBag.Title = "Hops";
}

<div class="panel panel-default">
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Usage</th>
                <th class="hidden-print">Possible substitutions</th>
                <th class="hidden-print"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hopModel in Model.List)
            {
                <tr>
                    <td>
                        <a href="/Hop/@hopModel.Hop.Id">@hopModel.Hop.Name</a>
                        <p class="visible-print-inline">
                            <br />@hopModel.Hop.Trade<br /><br />
                            <strong>Aroma:</strong> @hopModel.Hop.Aroma<br />
                            @if (hopModel.Aromas.Any())
                            {
                                <strong>Aroma profile:</strong> @Html.Raw(string.Join(", ", hopModel.Aromas.Select(a => $"<a href=\"/Search/Aroma/{(int)a}\">{a.Wordify()}</a>")))<br />
                            }
                            <strong>Typical beer styles:</strong> @hopModel.Hop.Styles
                        </p>
                    </td>
                    <td>@hopModel.Hop.BrewingUsageString()</td>
                    <td class="hidden-print">@Html.Raw(string.Join(", ", hopModel.Substitutions.Select(s => $"<a href=\"/Hop/{s.Id}\">{s.Name}</a>")))</td>
                    <td class="hidden-print"><span style="cursor: pointer;" class="hop-inv glyphicon glyphicon-star-empty" aria-hidden="true" aria-label="star" data-hop-id="@hopModel.Hop.Id" onclick="save(this);"></span></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (Model.NumberOfPages > 1)
{
    <div class="row hidden-print">
        <div class="col-lg-6 col-lg-offset-3 text-center">
            <nav>
                <ul class="pagination">
                    @if (Model.CurrentPageIndex > 1)
                {
                        <li>
                            <a href="@(string.IsNullOrEmpty(Model.SearchTerm) ? string.Empty : "~/Search/" + Model.SearchTerm + "/")@(Model.CurrentPageIndex - 1)" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }

                    @for (int i = 1; i <= Model.NumberOfPages; i++)
                {
                        <li @(Model.CurrentPageIndex == i ? "class=active" : string.Empty)>
                            <a href="@(string.IsNullOrEmpty(Model.SearchTerm) ? string.Empty : "~/Search/" + Model.SearchTerm + "/")@i">@i</a>
                        </li>
                    }

                    @if (Model.CurrentPageIndex != Model.NumberOfPages)
                {
                        <li>
                            <a href="@(string.IsNullOrEmpty(Model.SearchTerm) ? string.Empty : "~/Search/" + Model.SearchTerm + "/")@(Model.CurrentPageIndex + 1)" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
}

<script>
    $(function () {
        loadFromInventory();
    });
</script>